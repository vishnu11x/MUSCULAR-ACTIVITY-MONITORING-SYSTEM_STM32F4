
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000430  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b8  080005c0  000105c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b8  080005b8  000105c0  2**0
                  CONTENTS
  4 .ARM          00000000  080005b8  080005b8  000105c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b8  080005c0  000105c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000105c0  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000105c0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000e62  00000000  00000000  00010633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005a7  00000000  00000000  00011495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000110  00000000  00000000  00011a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000ab  00000000  00000000  00011b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019d41  00000000  00000000  00011bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003504  00000000  00000000  0002b93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d711  00000000  00000000  0002ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000208  00000000  00000000  000bc554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  000bc75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005a0 	.word	0x080005a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080005a0 	.word	0x080005a0

080001c8 <ADC_init>:

//----------------------------------------------------------------------------------------
/*Function definition*/

//To initialize ADC1
void ADC_init (void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

    /* CONFIG GPIO */
	RCC -> AHB1ENR |= GPIOAEN;  // Enable clock to GPIOA
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <ADC_init+0x64>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d0:	4a16      	ldr	r2, [pc, #88]	; (800022c <ADC_init+0x64>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= ( 1U << 2 );  // Enable analog mode in Port A1
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <ADC_init+0x68>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a14      	ldr	r2, [pc, #80]	; (8000230 <ADC_init+0x68>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ( 1U << 3 );
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <ADC_init+0x68>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <ADC_init+0x68>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6013      	str	r3, [r2, #0]

	/* CONFIG ADC */
	RCC -> APB2ENR |= ( ADC1EN );  // Enable clock to ADC1
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <ADC_init+0x64>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <ADC_init+0x64>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1 -> CR2 |= ( 1U << 0 );  // Enable ADC1
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <ADC_init+0x6c>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <ADC_init+0x6c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6093      	str	r3, [r2, #8]
	ADC1 -> SQR3 = ADC_CH1;  // Select Channel 1 in Sequence
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <ADC_init+0x6c>)
 800020a:	2201      	movs	r2, #1
 800020c:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = ( 0X00 );  // length of Channel Sequence (1)
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <ADC_init+0x6c>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1 -> CR1 &= ~(( 1U << 24 ) | ( 1U << 25 )); // Set Resolution to 12-bit
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <ADC_init+0x6c>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <ADC_init+0x6c>)
 800021a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800021e:	6053      	str	r3, [r2, #4]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000
 8000234:	40012000 	.word	0x40012000

08000238 <ADC_start>:

// To start conversion
void ADC_start (void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

	ADC1 -> CR2 |= ( 1U << 1 );  // To set continuous conversion mode
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <ADC_start+0x28>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <ADC_start+0x28>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 30);  // To start the ADC conversion
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <ADC_start+0x28>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <ADC_start+0x28>)
 800024e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000252:	6093      	str	r3, [r2, #8]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40012000 	.word	0x40012000

08000264 <ADC_read>:
void ADC_stop (void){
	ADC1 -> CR2 &= (~( 1U << 30 ));  // To stop ADC conversion
}

// To read ADC data
uint16_t  ADC_read (void){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0

	while(!( ADC1-> SR & ( 1U << 1) ));  // To check if ADC conversion finished
 800026a:	bf00      	nop
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <ADC_read+0x38>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f003 0302 	and.w	r3, r3, #2
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <ADC_read+0x8>

	uint32_t value;  // To store raw ADC value
	value = (ADC1 -> DR);
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <ADC_read+0x38>)
 800027a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027c:	607b      	str	r3, [r7, #4]
	ADC1 -> SR &= (~( 1U << 1));  // Clear status register of ADC
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <ADC_read+0x38>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a06      	ldr	r2, [pc, #24]	; (800029c <ADC_read+0x38>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6013      	str	r3, [r2, #0]

 	return( value );
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	b29b      	uxth	r3, r3
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40012000 	.word	0x40012000

080002a0 <ADC_convert>:

// TO convert raw ADC value to volts
float32_t ADC_convert( uint16_t raw_adc){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]

	float32_t ADC_volts = ( raw_adc * ADC_VREF) / ADC_RES;  // Equation to convert to volts
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	ee07 3a90 	vmov	s15, r3
 80002b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80002dc <ADC_convert+0x3c>
 80002b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002bc:	eddf 6a08 	vldr	s13, [pc, #32]	; 80002e0 <ADC_convert+0x40>
 80002c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002c4:	edc7 7a03 	vstr	s15, [r7, #12]
	return ( ADC_volts);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	ee07 3a90 	vmov	s15, r3
}
 80002ce:	eeb0 0a67 	vmov.f32	s0, s15
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40533333 	.word	0x40533333
 80002e0:	457ff000 	.word	0x457ff000

080002e4 <clock_168hz_config>:
//-----------------------------------------------------------------------------------------------

/* FUNCTION DEFINITION */

/* Set system clock to 168Hz */
void clock_168hz_config(void){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

	RCC -> CR |= ( 1U << 16);  // Enable HSE oscillator
 80002e8:	4b35      	ldr	r3, [pc, #212]	; (80003c0 <clock_168hz_config+0xdc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a34      	ldr	r2, [pc, #208]	; (80003c0 <clock_168hz_config+0xdc>)
 80002ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f2:	6013      	str	r3, [r2, #0]
	while( ( (RCC -> CR) & ( 1U << 17 ) ) == 0){}  // Wait till HSE oscillator is stable
 80002f4:	bf00      	nop
 80002f6:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <clock_168hz_config+0xdc>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f9      	beq.n	80002f6 <clock_168hz_config+0x12>

	RCC -> CFGR &= ~( 1U << 7);  // Set prescaler for AHB (divide by 1)
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <clock_168hz_config+0xdc>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	4a2e      	ldr	r2, [pc, #184]	; (80003c0 <clock_168hz_config+0xdc>)
 8000308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800030c:	6093      	str	r3, [r2, #8]

	RCC -> CFGR |= ( 1U << 10); // Set prescaler for APB1 (divided by 4)
 800030e:	4b2c      	ldr	r3, [pc, #176]	; (80003c0 <clock_168hz_config+0xdc>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a2b      	ldr	r2, [pc, #172]	; (80003c0 <clock_168hz_config+0xdc>)
 8000314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000318:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 11);
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <clock_168hz_config+0xdc>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a28      	ldr	r2, [pc, #160]	; (80003c0 <clock_168hz_config+0xdc>)
 8000320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000324:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 12);
 8000326:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <clock_168hz_config+0xdc>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <clock_168hz_config+0xdc>)
 800032c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000330:	6093      	str	r3, [r2, #8]

	RCC -> CFGR &= ~( 1U << 13); // Set prescaler for APB2 (divided by 2)
 8000332:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <clock_168hz_config+0xdc>)
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	4a22      	ldr	r2, [pc, #136]	; (80003c0 <clock_168hz_config+0xdc>)
 8000338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800033c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 14);
 800033e:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <clock_168hz_config+0xdc>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <clock_168hz_config+0xdc>)
 8000344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000348:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 15);
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <clock_168hz_config+0xdc>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <clock_168hz_config+0xdc>)
 8000350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000354:	6093      	str	r3, [r2, #8]

	/* Config PLL */
	RCC -> PLLCFGR = (PLL_M << 0) | ( PLL_N << 6 ) | (PLL_P << 16 ) | ( 1U << 22 ) | ( PLL_Q << 24 );
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <clock_168hz_config+0xdc>)
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <clock_168hz_config+0xe0>)
 800035a:	605a      	str	r2, [r3, #4]

	RCC -> CR |= ( 1U << 24);  // Enable PLL
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <clock_168hz_config+0xdc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <clock_168hz_config+0xdc>)
 8000362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000366:	6013      	str	r3, [r2, #0]

	FLASH -> ACR |= ( 1U << 0);  // Set flash latency to 5 wait state
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <clock_168hz_config+0xe4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <clock_168hz_config+0xe4>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6013      	str	r3, [r2, #0]
	FLASH -> ACR &= ~( 1U << 1);
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <clock_168hz_config+0xe4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <clock_168hz_config+0xe4>)
 800037a:	f023 0302 	bic.w	r3, r3, #2
 800037e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= ( 1U << 2);
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <clock_168hz_config+0xe4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <clock_168hz_config+0xe4>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6013      	str	r3, [r2, #0]

	RCC -> CFGR &= ~( 1U << 0);  // Select PLL as system clock
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <clock_168hz_config+0xdc>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <clock_168hz_config+0xdc>)
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 1);
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <clock_168hz_config+0xdc>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <clock_168hz_config+0xdc>)
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6093      	str	r3, [r2, #8]

	while(!((RCC -> CFGR) & ( 0x02 << 2))){}
 80003a4:	bf00      	nop
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <clock_168hz_config+0xdc>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	f003 0308 	and.w	r3, r3, #8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0f9      	beq.n	80003a6 <clock_168hz_config+0xc2>




}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40023800 	.word	0x40023800
 80003c4:	07425408 	.word	0x07425408
 80003c8:	40023c00 	.word	0x40023c00

080003cc <delayms>:


//-----------------------------------------------------------------------------------------

// To create delay in ms
void delayms(int delay){
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]


	SysTick -> LOAD = 167999;  // no. of clk per milliseconds
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <delayms+0x54>)
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <delayms+0x58>)
 80003d8:	605a      	str	r2, [r3, #4]
	SysTick -> VAL = 0;  //  clear current value
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <delayms+0x54>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= ( 1U << 0 ) | ( 1U << 2); // Enable clock and systick
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <delayms+0x54>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <delayms+0x54>)
 80003e6:	f043 0305 	orr.w	r3, r3, #5
 80003ea:	6013      	str	r3, [r2, #0]

	for( int i=0; i < delay; i++){
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e009      	b.n	8000406 <delayms+0x3a>

		while(((SysTick -> CTRL ) & ( 1U << 16 )) == 0);  // To check count flag is high
 80003f2:	bf00      	nop
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <delayms+0x54>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f9      	beq.n	80003f4 <delayms+0x28>
	for( int i=0; i < delay; i++){
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	429a      	cmp	r2, r3
 800040c:	dbf1      	blt.n	80003f2 <delayms+0x26>
	}

	SysTick -> CTRL =  0;  // reset count flag
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <delayms+0x54>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]

}
 8000414:	bf00      	nop
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	e000e010 	.word	0xe000e010
 8000424:	0002903f 	.word	0x0002903f

08000428 <main>:


//----------------------------------------------------------------------------------------
/* MAIN FUNCTION */

int main(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	clock_168hz_config();
 800042c:	f7ff ff5a 	bl	80002e4 <clock_168hz_config>
	//SystemCoreClockUpdate();
	fpu_enable();  // Enable floating point unit
 8000430:	f000 f828 	bl	8000484 <fpu_enable>
	ADC_init();  // Initialize ADC
 8000434:	f7ff fec8 	bl	80001c8 <ADC_init>
	SWT1_init();  // Initialize Switch
 8000438:	f000 f84e 	bl	80004d8 <SWT1_init>
	while(!((GPIOA -> IDR ) & ( 1U << 0 )));  // Wait for input from switch
 800043c:	bf00      	nop
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <main+0x50>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <main+0x16>
	ADC_start();  // start ADC
 800044a:	f7ff fef5 	bl	8000238 <ADC_start>


	while(1){

		sensor_read = ADC_read();  // Read raw ADC value
 800044e:	f7ff ff09 	bl	8000264 <ADC_read>
 8000452:	4603      	mov	r3, r0
 8000454:	461a      	mov	r2, r3
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <main+0x54>)
 8000458:	801a      	strh	r2, [r3, #0]
		sensor_data = ADC_convert( sensor_read );  // converts raw ADC value to volts
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <main+0x54>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff1e 	bl	80002a0 <ADC_convert>
 8000464:	eef0 7a40 	vmov.f32	s15, s0
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <main+0x58>)
 800046a:	edc3 7a00 	vstr	s15, [r3]
		delayms(1000);
 800046e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000472:	f7ff ffab 	bl	80003cc <delayms>
		sensor_read = ADC_read();  // Read raw ADC value
 8000476:	e7ea      	b.n	800044e <main+0x26>
 8000478:	40020000 	.word	0x40020000
 800047c:	2000001c 	.word	0x2000001c
 8000480:	20000020 	.word	0x20000020

08000484 <fpu_enable>:
//------------------------------------------------------------------------------------------------------------------------


/* FUNCTION DEFENTION */

void fpu_enable(void){
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

	/* ENABLE FLOATING POINT UNIT FULL ACESS*/
	SCB -> CPACR |= ( 1U << 20);
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <fpu_enable+0x50>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <fpu_enable+0x50>)
 8000490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 21);
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <fpu_enable+0x50>)
 800049a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <fpu_enable+0x50>)
 80004a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 22);
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <fpu_enable+0x50>)
 80004aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ae:	4a09      	ldr	r2, [pc, #36]	; (80004d4 <fpu_enable+0x50>)
 80004b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 23);
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <fpu_enable+0x50>)
 80004ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <fpu_enable+0x50>)
 80004c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <SWT1_init>:
void SWT1_init(void);  // TO SET PA0 as input

//----------------------------------------------------------------------------------------
/*Function definition*/

void SWT1_init(void){
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

	GPIOA-> MODER &= (~( 1U << 0)); // TO set PA0 as input
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <SWT1_init+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <SWT1_init+0x28>)
 80004e2:	f023 0301 	bic.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= (~( 1U << 1));
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <SWT1_init+0x28>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <SWT1_init+0x28>)
 80004ee:	f023 0302 	bic.w	r3, r3, #2
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40020000 	.word	0x40020000

08000504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000532:	f000 f811 	bl	8000558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff ff77 	bl	8000428 <main>

0800053a <LoopForever>:

LoopForever:
  b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   r0, =_estack
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000548:	080005c0 	.word	0x080005c0
  ldr r2, =_sbss
 800054c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000550:	20000024 	.word	0x20000024

08000554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>
	...

08000558 <__libc_init_array>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4d0d      	ldr	r5, [pc, #52]	; (8000590 <__libc_init_array+0x38>)
 800055c:	4c0d      	ldr	r4, [pc, #52]	; (8000594 <__libc_init_array+0x3c>)
 800055e:	1b64      	subs	r4, r4, r5
 8000560:	10a4      	asrs	r4, r4, #2
 8000562:	2600      	movs	r6, #0
 8000564:	42a6      	cmp	r6, r4
 8000566:	d109      	bne.n	800057c <__libc_init_array+0x24>
 8000568:	4d0b      	ldr	r5, [pc, #44]	; (8000598 <__libc_init_array+0x40>)
 800056a:	4c0c      	ldr	r4, [pc, #48]	; (800059c <__libc_init_array+0x44>)
 800056c:	f000 f818 	bl	80005a0 <_init>
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	2600      	movs	r6, #0
 8000576:	42a6      	cmp	r6, r4
 8000578:	d105      	bne.n	8000586 <__libc_init_array+0x2e>
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000580:	4798      	blx	r3
 8000582:	3601      	adds	r6, #1
 8000584:	e7ee      	b.n	8000564 <__libc_init_array+0xc>
 8000586:	f855 3b04 	ldr.w	r3, [r5], #4
 800058a:	4798      	blx	r3
 800058c:	3601      	adds	r6, #1
 800058e:	e7f2      	b.n	8000576 <__libc_init_array+0x1e>
 8000590:	080005b8 	.word	0x080005b8
 8000594:	080005b8 	.word	0x080005b8
 8000598:	080005b8 	.word	0x080005b8
 800059c:	080005bc 	.word	0x080005bc

080005a0 <_init>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr

080005ac <_fini>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr
