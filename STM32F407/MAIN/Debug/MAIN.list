
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104d4  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000bca  00000000  00000000  00010547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004f2  00000000  00000000  00011111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  00011608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000097  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019c3d  00000000  00000000  0001178f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002ee9  00000000  00000000  0002b3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d68b  00000000  00000000  0002e2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001d8  00000000  00000000  000bb940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  000bbb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b4 	.word	0x080004b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004b4 	.word	0x080004b4

080001c8 <ADC_init>:

//----------------------------------------------------------------------------------------
/*Function definition*/

//To initialize ADC1
void ADC_init (void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

    /* CONFIG GPIO */
	RCC -> AHB1ENR |= GPIOAEN;  // Enable clock to GPIOA
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <ADC_init+0x64>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d0:	4a16      	ldr	r2, [pc, #88]	; (800022c <ADC_init+0x64>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= ( 1U << 2 );  // Enable analog mode in Port A1
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <ADC_init+0x68>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a14      	ldr	r2, [pc, #80]	; (8000230 <ADC_init+0x68>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ( 1U << 3 );
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <ADC_init+0x68>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <ADC_init+0x68>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6013      	str	r3, [r2, #0]

	/* CONFIG ADC */
	RCC -> APB2ENR |= ( ADC1EN );  // Enable clock to ADC1
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <ADC_init+0x64>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <ADC_init+0x64>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1 -> CR2 |= ( 1U << 0 );  // Enable ADC1
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <ADC_init+0x6c>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <ADC_init+0x6c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6093      	str	r3, [r2, #8]
	ADC1 -> SQR3 = ADC_CH1;  // Select Channel 1 in Sequence
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <ADC_init+0x6c>)
 800020a:	2201      	movs	r2, #1
 800020c:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = ( 0X00 );  // length of Channel Sequence (1)
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <ADC_init+0x6c>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1 -> CR1 |= (( 1U << 24 ) | ( 1U << 25 )); // Set Resolution to 12-bit
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <ADC_init+0x6c>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <ADC_init+0x6c>)
 800021a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800021e:	6053      	str	r3, [r2, #4]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000
 8000234:	40012000 	.word	0x40012000

08000238 <ADC_start>:

// To start conversion
void ADC_start (void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

	ADC1 -> CR2 |= ( 1U << 1 );  // To set continuous conversion mode
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <ADC_start+0x28>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a07      	ldr	r2, [pc, #28]	; (8000260 <ADC_start+0x28>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 30);  // To start the ADC conversion
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <ADC_start+0x28>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <ADC_start+0x28>)
 800024e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000252:	6093      	str	r3, [r2, #8]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40012000 	.word	0x40012000

08000264 <ADC_read>:
void ADC_stop (void){
	ADC1 -> CR2 &= (~( 1U << 30 ));  // To stop ADC conversion
}

// To read ADC data
uint16_t  ADC_read (void){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0

	while(!( ADC1-> SR & ( 1U << 1) ));  // To check if ADC conversion finished
 800026a:	bf00      	nop
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <ADC_read+0x38>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f003 0302 	and.w	r3, r3, #2
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <ADC_read+0x8>

	uint32_t value;  // To store raw ADC value
	value = (ADC1 -> DR);
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <ADC_read+0x38>)
 800027a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027c:	607b      	str	r3, [r7, #4]
	ADC1 -> SR &= (~( 1U << 1));  // Clear status register of ADC
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <ADC_read+0x38>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a06      	ldr	r2, [pc, #24]	; (800029c <ADC_read+0x38>)
 8000284:	f023 0302 	bic.w	r3, r3, #2
 8000288:	6013      	str	r3, [r2, #0]

 	return( value );
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	b29b      	uxth	r3, r3
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40012000 	.word	0x40012000

080002a0 <ADC_convert>:

// TO convert raw ADC value to volts
float32_t ADC_convert( uint16_t raw_adc){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]

	float32_t ADC_volts = ( raw_adc * ADC_VREF) / ADC_RES;  // Equation to convert to volts
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	ee07 3a90 	vmov	s15, r3
 80002b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80002dc <ADC_convert+0x3c>
 80002b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002bc:	eddf 6a08 	vldr	s13, [pc, #32]	; 80002e0 <ADC_convert+0x40>
 80002c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002c4:	edc7 7a03 	vstr	s15, [r7, #12]
	return ( ADC_volts);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	ee07 3a90 	vmov	s15, r3
}
 80002ce:	eeb0 0a67 	vmov.f32	s0, s15
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40533333 	.word	0x40533333
 80002e0:	457ff000 	.word	0x457ff000

080002e4 <delayms>:


//-----------------------------------------------------------------------------------------

// To create delay in ms
void delayms(int delay){
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

	SysTick -> LOAD = 16000;  // no. of clk per milliseconds
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <delayms+0x58>)
 80002ee:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002f2:	605a      	str	r2, [r3, #4]
	SysTick -> VAL = 0;  //  clear current value
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <delayms+0x58>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= ( 1U << 0 ) | ( 1U << 2); // Enable clock and systick
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <delayms+0x58>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <delayms+0x58>)
 8000300:	f043 0305 	orr.w	r3, r3, #5
 8000304:	6013      	str	r3, [r2, #0]

	for( int i=0; i < delay; i++){
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	e009      	b.n	8000320 <delayms+0x3c>

		while(((SysTick -> CTRL ) & ( 1U << 16 )) == 0);  // To check count flag is high
 800030c:	bf00      	nop
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <delayms+0x58>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <delayms+0x2a>
	for( int i=0; i < delay; i++){
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3301      	adds	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbf1      	blt.n	800030c <delayms+0x28>
	}

	SysTick -> CTRL =  0;  // reset count flag
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <delayms+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]

}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e010 	.word	0xe000e010

08000340 <main>:


//----------------------------------------------------------------------------------------
/* MAIN FUNCTION */

int main(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0


	fpu_enable();  // Enable floating point unit
 8000344:	f000 f828 	bl	8000398 <fpu_enable>
	ADC_init();  // Initialize ADC
 8000348:	f7ff ff3e 	bl	80001c8 <ADC_init>
	SWT1_init();  // Initialize Switch
 800034c:	f000 f84e 	bl	80003ec <SWT1_init>
	while(!((GPIOA -> IDR ) & ( 1U << 0 )));  // Wait for input from switch
 8000350:	bf00      	nop
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0x4c>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <main+0x12>
	ADC_start();  // start ADC
 800035e:	f7ff ff6b 	bl	8000238 <ADC_start>


	while(1){

		sensor_read = ADC_read();  // Read raw ADC value
 8000362:	f7ff ff7f 	bl	8000264 <ADC_read>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <main+0x50>)
 800036c:	801a      	strh	r2, [r3, #0]
		sensor_data = ADC_convert( sensor_read );  // converts raw ADC value to volts
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <main+0x50>)
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff94 	bl	80002a0 <ADC_convert>
 8000378:	eef0 7a40 	vmov.f32	s15, s0
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <main+0x54>)
 800037e:	edc3 7a00 	vstr	s15, [r3]
		delayms(500);
 8000382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000386:	f7ff ffad 	bl	80002e4 <delayms>
		sensor_read = ADC_read();  // Read raw ADC value
 800038a:	e7ea      	b.n	8000362 <main+0x22>
 800038c:	40020000 	.word	0x40020000
 8000390:	2000001c 	.word	0x2000001c
 8000394:	20000020 	.word	0x20000020

08000398 <fpu_enable>:
//------------------------------------------------------------------------------------------------------------------------


/* FUNCTION DEFENTION */

void fpu_enable(void){
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

	/* ENABLE FLOATING POINT UNIT FULL ACESS*/
	SCB -> CPACR |= ( 1U << 20);
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <fpu_enable+0x50>)
 800039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003a2:	4a11      	ldr	r2, [pc, #68]	; (80003e8 <fpu_enable+0x50>)
 80003a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 21);
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <fpu_enable+0x50>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <fpu_enable+0x50>)
 80003b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 22);
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <fpu_enable+0x50>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <fpu_enable+0x50>)
 80003c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 23);
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <fpu_enable+0x50>)
 80003ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003d2:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <fpu_enable+0x50>)
 80003d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <SWT1_init>:
void SWT1_init(void);  // TO SET PA0 as input

//----------------------------------------------------------------------------------------
/*Function definition*/

void SWT1_init(void){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

	GPIOA-> MODER &= (~( 1U << 0)); // TO set PA0 as input
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <SWT1_init+0x28>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a07      	ldr	r2, [pc, #28]	; (8000414 <SWT1_init+0x28>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= (~( 1U << 1));
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <SWT1_init+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <SWT1_init+0x28>)
 8000402:	f023 0302 	bic.w	r3, r3, #2
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40020000 	.word	0x40020000

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	; (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	; (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff ff79 	bl	8000340 <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	20000024 	.word	0x20000024

08000468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	; (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	; (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	; (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	; (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
