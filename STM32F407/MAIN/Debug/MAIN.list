
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000664  0800066c  0001066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000664  08000664  0001066c  2**0
                  CONTENTS
  4 .ARM          00000000  08000664  08000664  0001066c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000664  0800066c  0001066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000668  08000668  00010668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001066c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001066c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001069c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001352  00000000  00000000  000106df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000644  00000000  00000000  00011a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  00012078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000b8  00000000  00000000  00012198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019df5  00000000  00000000  00012250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003657  00000000  00000000  0002c045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008dde8  00000000  00000000  0002f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000240  00000000  00000000  000bd484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  000bd6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800064c 	.word	0x0800064c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800064c 	.word	0x0800064c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <ADC_init>:

//----------------------------------------------------------------------------------------
/*Function definition*/

//To initialize ADC1
void ADC_init (void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

    /* CONFIG GPIO */
	RCC -> AHB1ENR |= GPIOAEN;  // Enable clock to GPIOA
 8000208:	4b36      	ldr	r3, [pc, #216]	; (80002e4 <ADC_init+0xe0>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a35      	ldr	r2, [pc, #212]	; (80002e4 <ADC_init+0xe0>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= ( 1U << 2 );  // Enable analog mode in Port A1
 8000214:	4b34      	ldr	r3, [pc, #208]	; (80002e8 <ADC_init+0xe4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a33      	ldr	r2, [pc, #204]	; (80002e8 <ADC_init+0xe4>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ( 1U << 3 );
 8000220:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <ADC_init+0xe4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a30      	ldr	r2, [pc, #192]	; (80002e8 <ADC_init+0xe4>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6013      	str	r3, [r2, #0]

	/* CONFIG ADC */
	RCC -> APB2ENR |= ( ADC1EN );  // Enable clock to ADC1
 800022c:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <ADC_init+0xe0>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <ADC_init+0xe0>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1 -> CR2 |= ( 1U << 0 );  // Enable ADC1
 8000238:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <ADC_init+0xe8>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a2b      	ldr	r2, [pc, #172]	; (80002ec <ADC_init+0xe8>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6093      	str	r3, [r2, #8]
	ADC1 -> SQR3 = ADC_CH1;  // Select Channel 1 in Sequence
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <ADC_init+0xe8>)
 8000246:	2201      	movs	r2, #1
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = ( 0X00 );  // length of Channel Sequence (1)
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <ADC_init+0xe8>)
 800024c:	2200      	movs	r2, #0
 800024e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1 -> CR1 &= ~(( 1U << 24 ) | ( 1U << 25 )); // Set Resolution to 12-bit
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <ADC_init+0xe8>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a25      	ldr	r2, [pc, #148]	; (80002ec <ADC_init+0xe8>)
 8000256:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800025a:	6053      	str	r3, [r2, #4]
	ADC1 -> CR1 |= ( 1U << 5);  // Enable interrupt for EOC
 800025c:	4b23      	ldr	r3, [pc, #140]	; (80002ec <ADC_init+0xe8>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a22      	ldr	r2, [pc, #136]	; (80002ec <ADC_init+0xe8>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6053      	str	r3, [r2, #4]
	ADC1 -> CR2 |= ( 1U << 28 ) | ( 1U << 29 ); //  Enable external trigger for ADC1
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <ADC_init+0xe8>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a1f      	ldr	r2, [pc, #124]	; (80002ec <ADC_init+0xe8>)
 800026e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000272:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 &= ~(( 1U << 24 ) | ( 1U << 27));// Select TIM2 TRGO event for external trigger
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <ADC_init+0xe8>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <ADC_init+0xe8>)
 800027a:	f023 6310 	bic.w	r3, r3, #150994944	; 0x9000000
 800027e:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 25) | ( 1U << 25);
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <ADC_init+0xe8>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a19      	ldr	r2, [pc, #100]	; (80002ec <ADC_init+0xe8>)
 8000286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800028a:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ ( ADC_IRQn);  // Enable interrupt in NVIC
 800028c:	2012      	movs	r0, #18
 800028e:	f7ff ff9b 	bl	80001c8 <__NVIC_EnableIRQ>

	/* CONFIG TIMER FOR TRIGGER (1000HZ) */
	RCC -> APB1ENR |= ( 1U << 0); // Enable clock for TIM2
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <ADC_init+0xe0>)
 8000294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <ADC_init+0xe0>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2 -> PSC = 41999;  // Set prescaler for 10000Hz timer frequency
 800029e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2 -> ARR = 9;  // Set auto reload value
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	2209      	movs	r2, #9
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2 -> CR2 &= ~(( 1U << 4) | ( 1U << 6));  // Select update event for TRGO
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ba:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80002be:	6053      	str	r3, [r2, #4]
	TIM2 -> CR2 |= ( 1U << 5);
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6053      	str	r3, [r2, #4]
	TIM2 -> CR1 |= ( 1U << 0);  // Enable TIM2
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000
 80002ec:	40012000 	.word	0x40012000

080002f0 <ADC_start>:

// To start conversion
void ADC_start (void){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

	ADC1 -> CR2 |= ( 1U << 30);  // To start the ADC conversion
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <ADC_start+0x1c>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <ADC_start+0x1c>)
 80002fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002fe:	6093      	str	r3, [r2, #8]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40012000 	.word	0x40012000

08000310 <ADC_stop>:

void ADC_stop (void){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	ADC1 -> CR2 &= (~( 1U << 30 ));  // To stop ADC conversion
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <ADC_stop+0x1c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <ADC_stop+0x1c>)
 800031a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800031e:	6093      	str	r3, [r2, #8]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40012000 	.word	0x40012000

08000330 <ADC_read>:

float32_t ADC_read (void){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

	adc_data = (ADC1->DR);
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <ADC_read+0x48>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <ADC_read+0x4c>)
 800033c:	801a      	strh	r2, [r3, #0]
	sensor_data = ( adc_data * ADC_VREF) / ADC_RES ;  // Equation to convert to volts
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <ADC_read+0x4c>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	b29b      	uxth	r3, r3
 8000344:	ee07 3a90 	vmov	s15, r3
 8000348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000380 <ADC_read+0x50>
 8000350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000354:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000384 <ADC_read+0x54>
 8000358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800035c:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <ADC_read+0x58>)
 800035e:	edc3 7a00 	vstr	s15, [r3]
	return (sensor_data);
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <ADC_read+0x58>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	ee07 3a90 	vmov	s15, r3


}
 800036a:	eeb0 0a67 	vmov.f32	s0, s15
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40012000 	.word	0x40012000
 800037c:	2000001c 	.word	0x2000001c
 8000380:	40533333 	.word	0x40533333
 8000384:	457ff000 	.word	0x457ff000
 8000388:	20000020 	.word	0x20000020

0800038c <ADC_IRQHandler>:

	float32_t ADC_volts = ( raw_adc * ADC_VREF) / ADC_RES ;  // Equation to convert to volts
	return ( ADC_volts);
}

void ADC_IRQHandler(void){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

	if( ((ADC1->SR) & ( 1U << 1) ) != 0){
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <ADC_IRQHandler+0x24>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	2b00      	cmp	r3, #0
 800039a:	d007      	beq.n	80003ac <ADC_IRQHandler+0x20>

		ADC1 -> SR &= ~( 1U << 1);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <ADC_IRQHandler+0x24>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <ADC_IRQHandler+0x24>)
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	6013      	str	r3, [r2, #0]
		ADC_read();
 80003a8:	f7ff ffc2 	bl	8000330 <ADC_read>
	}
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40012000 	.word	0x40012000

080003b4 <clock_max_config>:
//-----------------------------------------------------------------------------------------------

/* FUNCTION DEFINITION */

/* Set system clock to 168Hz */
void clock_max_config(void){
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

	RCC -> CR |= ( 1U << 16);  // Enable HSE oscillator
 80003b8:	4b35      	ldr	r3, [pc, #212]	; (8000490 <clock_max_config+0xdc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a34      	ldr	r2, [pc, #208]	; (8000490 <clock_max_config+0xdc>)
 80003be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c2:	6013      	str	r3, [r2, #0]
	while( ( (RCC -> CR) & ( 1U << 17 ) ) == 0){}  // Wait till HSE oscillator is stable
 80003c4:	bf00      	nop
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <clock_max_config+0xdc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0f9      	beq.n	80003c6 <clock_max_config+0x12>

	RCC -> CFGR &= ~( 1U << 7);  // Set prescaler for AHB (divide by 1)
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <clock_max_config+0xdc>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	4a2e      	ldr	r2, [pc, #184]	; (8000490 <clock_max_config+0xdc>)
 80003d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003dc:	6093      	str	r3, [r2, #8]

	RCC -> CFGR |= ( 1U << 10); // Set prescaler for APB1 (divided by 4)
 80003de:	4b2c      	ldr	r3, [pc, #176]	; (8000490 <clock_max_config+0xdc>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	4a2b      	ldr	r2, [pc, #172]	; (8000490 <clock_max_config+0xdc>)
 80003e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e8:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 11);
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <clock_max_config+0xdc>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	4a28      	ldr	r2, [pc, #160]	; (8000490 <clock_max_config+0xdc>)
 80003f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003f4:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 12);
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <clock_max_config+0xdc>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	4a25      	ldr	r2, [pc, #148]	; (8000490 <clock_max_config+0xdc>)
 80003fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000400:	6093      	str	r3, [r2, #8]

	RCC -> CFGR &= ~( 1U << 13); // Set prescaler for APB2 (divided by 2)
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <clock_max_config+0xdc>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	4a22      	ldr	r2, [pc, #136]	; (8000490 <clock_max_config+0xdc>)
 8000408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800040c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 14);
 800040e:	4b20      	ldr	r3, [pc, #128]	; (8000490 <clock_max_config+0xdc>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <clock_max_config+0xdc>)
 8000414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000418:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 15);
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <clock_max_config+0xdc>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <clock_max_config+0xdc>)
 8000420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000424:	6093      	str	r3, [r2, #8]

	/* Config PLL */
	RCC -> PLLCFGR = (PLL_M) | ( PLL_N << 6 ) | (((PLL_P >>1 )-1) << 16) | ( 1U << 22 ) | ( PLL_Q << 24 );
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <clock_max_config+0xdc>)
 8000428:	4a1a      	ldr	r2, [pc, #104]	; (8000494 <clock_max_config+0xe0>)
 800042a:	605a      	str	r2, [r3, #4]

	RCC -> CR |= ( 1U << 24);  // Enable PLL
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <clock_max_config+0xdc>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <clock_max_config+0xdc>)
 8000432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000436:	6013      	str	r3, [r2, #0]

	FLASH -> ACR |= ( 1U << 0);  // Set flash latency to 5 wait state
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <clock_max_config+0xe4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <clock_max_config+0xe4>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]
	FLASH -> ACR &= ~( 1U << 1);
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <clock_max_config+0xe4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <clock_max_config+0xe4>)
 800044a:	f023 0302 	bic.w	r3, r3, #2
 800044e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= ( 1U << 2);
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <clock_max_config+0xe4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <clock_max_config+0xe4>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6013      	str	r3, [r2, #0]

	RCC -> CFGR &= ~( 1U << 0);  // Select PLL as system clock
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <clock_max_config+0xdc>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <clock_max_config+0xdc>)
 8000462:	f023 0301 	bic.w	r3, r3, #1
 8000466:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 1);
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <clock_max_config+0xdc>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4a08      	ldr	r2, [pc, #32]	; (8000490 <clock_max_config+0xdc>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6093      	str	r3, [r2, #8]

	while(!((RCC -> CFGR) & ( 0x02 << 2))){}
 8000474:	bf00      	nop
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <clock_max_config+0xdc>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f003 0308 	and.w	r3, r3, #8
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <clock_max_config+0xc2>




}
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40023800 	.word	0x40023800
 8000494:	07405408 	.word	0x07405408
 8000498:	40023c00 	.word	0x40023c00

0800049c <delayms>:


//-----------------------------------------------------------------------------------------

// To create delay in ms
void delayms(int delay){
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

	SysTick -> LOAD = 167999;  // no. of clk per milliseconds
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <delayms+0x54>)
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <delayms+0x58>)
 80004a8:	605a      	str	r2, [r3, #4]
	SysTick -> VAL = 0;  //  clear current value
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <delayms+0x54>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= ( 1U << 0 ) | ( 1U << 2); // Enable clock and systick
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <delayms+0x54>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <delayms+0x54>)
 80004b6:	f043 0305 	orr.w	r3, r3, #5
 80004ba:	6013      	str	r3, [r2, #0]

	for( int i=0; i < delay; i++){
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	e009      	b.n	80004d6 <delayms+0x3a>

		while(((SysTick -> CTRL ) & ( 1U << 16 )) == 0);  // To check count flag is high
 80004c2:	bf00      	nop
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <delayms+0x54>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f9      	beq.n	80004c4 <delayms+0x28>
	for( int i=0; i < delay; i++){
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	dbf1      	blt.n	80004c2 <delayms+0x26>
	}

	SysTick -> CTRL =  0;  // reset count flag
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <delayms+0x54>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]

}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e010 	.word	0xe000e010
 80004f4:	0002903f 	.word	0x0002903f

080004f8 <main>:


//----------------------------------------------------------------------------------------
/* MAIN FUNCTION */

int main(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

	clock_max_config();  // Set SysClk 168MHz
 80004fc:	f7ff ff5a 	bl	80003b4 <clock_max_config>
	fpu_enable();  // Enable floating point unit
 8000500:	f000 f816 	bl	8000530 <fpu_enable>
	ADC_init();  // Initialize ADC
 8000504:	f7ff fe7e 	bl	8000204 <ADC_init>
	SWT1_init();  // Initialize Switch
 8000508:	f000 f83c 	bl	8000584 <SWT1_init>


	while(1){

		/* Wait for input from switch*/
		while( ((GPIOA -> IDR ) & ( 1U << 0 )) == 1){
 800050c:	e004      	b.n	8000518 <main+0x20>

			ADC_start();  // start ADC
 800050e:	f7ff feef 	bl	80002f0 <ADC_start>
			delayms(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ffc2 	bl	800049c <delayms>
		while( ((GPIOA -> IDR ) & ( 1U << 0 )) == 1){
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <main+0x34>)
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	2b01      	cmp	r3, #1
 8000522:	d0f4      	beq.n	800050e <main+0x16>

		}

		ADC_stop();
 8000524:	f7ff fef4 	bl	8000310 <ADC_stop>
		while( ((GPIOA -> IDR ) & ( 1U << 0 )) == 1){
 8000528:	e7f6      	b.n	8000518 <main+0x20>
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000

08000530 <fpu_enable>:
//------------------------------------------------------------------------------------------------------------------------


/* FUNCTION DEFENTION */

void fpu_enable(void){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

	/* ENABLE FLOATING POINT UNIT FULL ACESS*/
	SCB -> CPACR |= ( 1U << 20);
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <fpu_enable+0x50>)
 8000536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <fpu_enable+0x50>)
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 21);
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <fpu_enable+0x50>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054a:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <fpu_enable+0x50>)
 800054c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 22);
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <fpu_enable+0x50>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <fpu_enable+0x50>)
 800055c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 23);
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <fpu_enable+0x50>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <fpu_enable+0x50>)
 800056c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <SWT1_init>:
void SWT1_init(void);  // TO SET PA0 as input

//----------------------------------------------------------------------------------------
/*Function definition*/

void SWT1_init(void){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

	GPIOA-> MODER &= (~( 1U << 0)); // TO set PA0 as input
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <SWT1_init+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <SWT1_init+0x28>)
 800058e:	f023 0301 	bic.w	r3, r3, #1
 8000592:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= (~( 1U << 1));
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <SWT1_init+0x28>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <SWT1_init+0x28>)
 800059a:	f023 0302 	bic.w	r3, r3, #2
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40020000 	.word	0x40020000

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 f811 	bl	8000604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff ff89 	bl	80004f8 <main>

080005e6 <LoopForever>:

LoopForever:
  b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f4:	0800066c 	.word	0x0800066c
  ldr r2, =_sbss
 80005f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005fc:	20000024 	.word	0x20000024

08000600 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <BusFault_Handler>
	...

08000604 <__libc_init_array>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	4d0d      	ldr	r5, [pc, #52]	; (800063c <__libc_init_array+0x38>)
 8000608:	4c0d      	ldr	r4, [pc, #52]	; (8000640 <__libc_init_array+0x3c>)
 800060a:	1b64      	subs	r4, r4, r5
 800060c:	10a4      	asrs	r4, r4, #2
 800060e:	2600      	movs	r6, #0
 8000610:	42a6      	cmp	r6, r4
 8000612:	d109      	bne.n	8000628 <__libc_init_array+0x24>
 8000614:	4d0b      	ldr	r5, [pc, #44]	; (8000644 <__libc_init_array+0x40>)
 8000616:	4c0c      	ldr	r4, [pc, #48]	; (8000648 <__libc_init_array+0x44>)
 8000618:	f000 f818 	bl	800064c <_init>
 800061c:	1b64      	subs	r4, r4, r5
 800061e:	10a4      	asrs	r4, r4, #2
 8000620:	2600      	movs	r6, #0
 8000622:	42a6      	cmp	r6, r4
 8000624:	d105      	bne.n	8000632 <__libc_init_array+0x2e>
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f855 3b04 	ldr.w	r3, [r5], #4
 800062c:	4798      	blx	r3
 800062e:	3601      	adds	r6, #1
 8000630:	e7ee      	b.n	8000610 <__libc_init_array+0xc>
 8000632:	f855 3b04 	ldr.w	r3, [r5], #4
 8000636:	4798      	blx	r3
 8000638:	3601      	adds	r6, #1
 800063a:	e7f2      	b.n	8000622 <__libc_init_array+0x1e>
 800063c:	08000664 	.word	0x08000664
 8000640:	08000664 	.word	0x08000664
 8000644:	08000664 	.word	0x08000664
 8000648:	08000668 	.word	0x08000668

0800064c <_init>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr

08000658 <_fini>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	bf00      	nop
 800065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065e:	bc08      	pop	{r3}
 8000660:	469e      	mov	lr, r3
 8000662:	4770      	bx	lr
