
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800066c  08000674  00010674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800066c  0800066c  00010674  2**0
                  CONTENTS
  4 .ARM          00000000  0800066c  0800066c  00010674  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800066c  08000674  00010674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800066c  0800066c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000670  08000670  00010670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010674  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010674  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000106a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000131b  00000000  00000000  000106e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000603  00000000  00000000  00011a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00012008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000b2  00000000  00000000  00012120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019df5  00000000  00000000  000121d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000363c  00000000  00000000  0002bfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ddca  00000000  00000000  0002f603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000214  00000000  00000000  000bd3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  000bd5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000654 	.word	0x08000654

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000654 	.word	0x08000654

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <ADC_init>:

//----------------------------------------------------------------------------------------
/*Function definition*/

//To initialize ADC1
void ADC_init (void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

    /* CONFIG GPIO */
	RCC -> AHB1ENR |= GPIOAEN;  // Enable clock to GPIOA
 8000208:	4b36      	ldr	r3, [pc, #216]	; (80002e4 <ADC_init+0xe0>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a35      	ldr	r2, [pc, #212]	; (80002e4 <ADC_init+0xe0>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= ( 1U << 2 );  // Enable analog mode in Port A1
 8000214:	4b34      	ldr	r3, [pc, #208]	; (80002e8 <ADC_init+0xe4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a33      	ldr	r2, [pc, #204]	; (80002e8 <ADC_init+0xe4>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ( 1U << 3 );
 8000220:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <ADC_init+0xe4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a30      	ldr	r2, [pc, #192]	; (80002e8 <ADC_init+0xe4>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6013      	str	r3, [r2, #0]

	/* CONFIG ADC */
	RCC -> APB2ENR |= ( ADC1EN );  // Enable clock to ADC1
 800022c:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <ADC_init+0xe0>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <ADC_init+0xe0>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1 -> CR2 |= ( 1U << 0 );  // Enable ADC1
 8000238:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <ADC_init+0xe8>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a2b      	ldr	r2, [pc, #172]	; (80002ec <ADC_init+0xe8>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6093      	str	r3, [r2, #8]
	ADC1 -> SQR3 = ADC_CH1;  // Select Channel 1 in Sequence
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <ADC_init+0xe8>)
 8000246:	2201      	movs	r2, #1
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = ( 0X00 );  // length of Channel Sequence (1)
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <ADC_init+0xe8>)
 800024c:	2200      	movs	r2, #0
 800024e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1 -> CR1 &= ~(( 1U << 24 ) | ( 1U << 25 )); // Set Resolution to 12-bit
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <ADC_init+0xe8>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a25      	ldr	r2, [pc, #148]	; (80002ec <ADC_init+0xe8>)
 8000256:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800025a:	6053      	str	r3, [r2, #4]
	ADC1 -> CR1 |= ( 1U << 5);  // Enable interrupt for EOC
 800025c:	4b23      	ldr	r3, [pc, #140]	; (80002ec <ADC_init+0xe8>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a22      	ldr	r2, [pc, #136]	; (80002ec <ADC_init+0xe8>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6053      	str	r3, [r2, #4]
	ADC1 -> CR2 |= ( 1U << 28 ) | ( 1U << 29 ); //  Enable external trigger for ADC1
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <ADC_init+0xe8>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a1f      	ldr	r2, [pc, #124]	; (80002ec <ADC_init+0xe8>)
 800026e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000272:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 &= ~(( 1U << 24 ) | ( 1U << 27));// Select TIM2 TRGO event for external trigger
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <ADC_init+0xe8>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <ADC_init+0xe8>)
 800027a:	f023 6310 	bic.w	r3, r3, #150994944	; 0x9000000
 800027e:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 25) | ( 1U << 25);
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <ADC_init+0xe8>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a19      	ldr	r2, [pc, #100]	; (80002ec <ADC_init+0xe8>)
 8000286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800028a:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ ( ADC_IRQn);  // Enable interrupt in NVIC
 800028c:	2012      	movs	r0, #18
 800028e:	f7ff ff9b 	bl	80001c8 <__NVIC_EnableIRQ>

	/* CONFIG TIMER FOR TRIGGER (1000HZ) */
	RCC -> APB1ENR |= ( 1U << 0); // Enable clock for TIM2
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <ADC_init+0xe0>)
 8000294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <ADC_init+0xe0>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2 -> PSC = 41999;  // Set prescaler for 10000Hz timer frequency
 800029e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2 -> ARR = 9;  // Set auto reload value
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	2209      	movs	r2, #9
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2 -> CR2 &= ~(( 1U << 4) | ( 1U << 6));  // Select update event for TRGO
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ba:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80002be:	6053      	str	r3, [r2, #4]
	TIM2 -> CR2 |= ( 1U << 5);
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6053      	str	r3, [r2, #4]
	TIM2 -> CR1 |= ( 1U << 0);  // Enable TIM2
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000
 80002ec:	40012000 	.word	0x40012000

080002f0 <ADC_start>:

// To start conversion
void ADC_start (void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

	ADC1 -> CR2 &= ~( 1U << 1);  // To Set in single conversion mode
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <ADC_start+0x24>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <ADC_start+0x24>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 30);  // To start the ADC conversion
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <ADC_start+0x24>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a03      	ldr	r2, [pc, #12]	; (8000314 <ADC_start+0x24>)
 8000306:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800030a:	6093      	str	r3, [r2, #8]
	ADC_stop();                  // Stop ADC
 800030c:	f000 f804 	bl	8000318 <ADC_stop>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40012000 	.word	0x40012000

08000318 <ADC_stop>:

void ADC_stop (void){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

	ADC1 -> CR2 &= (~( 1U << 30 ));  // To stop ADC conversion
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <ADC_stop+0x1c>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <ADC_stop+0x1c>)
 8000322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000326:	6093      	str	r3, [r2, #8]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40012000 	.word	0x40012000

08000338 <ADC_read>:

float32_t ADC_read (void){
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

	adc_data = (ADC1->DR);
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <ADC_read+0x48>)
 800033e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <ADC_read+0x4c>)
 8000344:	801a      	strh	r2, [r3, #0]
	sensor_data = ( adc_data * ADC_VREF) / ADC_RES ;  // Equation to convert to volts
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <ADC_read+0x4c>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	b29b      	uxth	r3, r3
 800034c:	ee07 3a90 	vmov	s15, r3
 8000350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000354:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000388 <ADC_read+0x50>
 8000358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800035c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800038c <ADC_read+0x54>
 8000360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <ADC_read+0x58>)
 8000366:	edc3 7a00 	vstr	s15, [r3]
	return (sensor_data);
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <ADC_read+0x58>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	ee07 3a90 	vmov	s15, r3


}
 8000372:	eeb0 0a67 	vmov.f32	s0, s15
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40012000 	.word	0x40012000
 8000384:	2000001c 	.word	0x2000001c
 8000388:	40533333 	.word	0x40533333
 800038c:	457ff000 	.word	0x457ff000
 8000390:	20000020 	.word	0x20000020

08000394 <ADC_IRQHandler>:


void ADC_IRQHandler(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0

	if( ((ADC1->SR) & ( 1U << 1) ) != 0){
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <ADC_IRQHandler+0x24>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 0302 	and.w	r3, r3, #2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d007      	beq.n	80003b4 <ADC_IRQHandler+0x20>

		ADC1 -> SR &= ~( 1U << 1);
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <ADC_IRQHandler+0x24>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <ADC_IRQHandler+0x24>)
 80003aa:	f023 0302 	bic.w	r3, r3, #2
 80003ae:	6013      	str	r3, [r2, #0]
		ADC_read();
 80003b0:	f7ff ffc2 	bl	8000338 <ADC_read>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40012000 	.word	0x40012000

080003bc <clock_max_config>:
//-----------------------------------------------------------------------------------------------

/* FUNCTION DEFINITION */

/* Set system clock to 168Hz */
void clock_max_config(void){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

	RCC -> CR |= ( 1U << 16);  // Enable HSE oscillator
 80003c0:	4b35      	ldr	r3, [pc, #212]	; (8000498 <clock_max_config+0xdc>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a34      	ldr	r2, [pc, #208]	; (8000498 <clock_max_config+0xdc>)
 80003c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003ca:	6013      	str	r3, [r2, #0]
	while( ( (RCC -> CR) & ( 1U << 17 ) ) == 0){}  // Wait till HSE oscillator is stable
 80003cc:	bf00      	nop
 80003ce:	4b32      	ldr	r3, [pc, #200]	; (8000498 <clock_max_config+0xdc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f9      	beq.n	80003ce <clock_max_config+0x12>

	RCC -> CFGR &= ~( 1U << 7);  // Set prescaler for AHB (divide by 1)
 80003da:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <clock_max_config+0xdc>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	4a2e      	ldr	r2, [pc, #184]	; (8000498 <clock_max_config+0xdc>)
 80003e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003e4:	6093      	str	r3, [r2, #8]

	RCC -> CFGR |= ( 1U << 10); // Set prescaler for APB1 (divided by 4)
 80003e6:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <clock_max_config+0xdc>)
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <clock_max_config+0xdc>)
 80003ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 11);
 80003f2:	4b29      	ldr	r3, [pc, #164]	; (8000498 <clock_max_config+0xdc>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	4a28      	ldr	r2, [pc, #160]	; (8000498 <clock_max_config+0xdc>)
 80003f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003fc:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 12);
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <clock_max_config+0xdc>)
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	4a25      	ldr	r2, [pc, #148]	; (8000498 <clock_max_config+0xdc>)
 8000404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000408:	6093      	str	r3, [r2, #8]

	RCC -> CFGR &= ~( 1U << 13); // Set prescaler for APB2 (divided by 2)
 800040a:	4b23      	ldr	r3, [pc, #140]	; (8000498 <clock_max_config+0xdc>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	4a22      	ldr	r2, [pc, #136]	; (8000498 <clock_max_config+0xdc>)
 8000410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000414:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 14);
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <clock_max_config+0xdc>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <clock_max_config+0xdc>)
 800041c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000420:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 15);
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <clock_max_config+0xdc>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <clock_max_config+0xdc>)
 8000428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800042c:	6093      	str	r3, [r2, #8]

	/* Config PLL */
	RCC -> PLLCFGR = (PLL_M) | ( PLL_N << 6 ) | (((PLL_P >>1 )-1) << 16) | ( 1U << 22 ) | ( PLL_Q << 24 );
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <clock_max_config+0xdc>)
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <clock_max_config+0xe0>)
 8000432:	605a      	str	r2, [r3, #4]

	RCC -> CR |= ( 1U << 24);  // Enable PLL
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <clock_max_config+0xdc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <clock_max_config+0xdc>)
 800043a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800043e:	6013      	str	r3, [r2, #0]

	FLASH -> ACR |= ( 1U << 0);  // Set flash latency to 5 wait state
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <clock_max_config+0xe4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <clock_max_config+0xe4>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]
	FLASH -> ACR &= ~( 1U << 1);
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <clock_max_config+0xe4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <clock_max_config+0xe4>)
 8000452:	f023 0302 	bic.w	r3, r3, #2
 8000456:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= ( 1U << 2);
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <clock_max_config+0xe4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <clock_max_config+0xe4>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6013      	str	r3, [r2, #0]

	RCC -> CFGR &= ~( 1U << 0);  // Select PLL as system clock
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <clock_max_config+0xdc>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <clock_max_config+0xdc>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 1);
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <clock_max_config+0xdc>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <clock_max_config+0xdc>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	6093      	str	r3, [r2, #8]

	while(!((RCC -> CFGR) & ( 0x02 << 2))){}
 800047c:	bf00      	nop
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <clock_max_config+0xdc>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f003 0308 	and.w	r3, r3, #8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <clock_max_config+0xc2>




}
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40023800 	.word	0x40023800
 800049c:	07405408 	.word	0x07405408
 80004a0:	40023c00 	.word	0x40023c00

080004a4 <delayms>:


//-----------------------------------------------------------------------------------------

// To create delay in ms
void delayms(int delay){
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]

	SysTick -> LOAD = 167999;  // no. of clk per milliseconds
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <delayms+0x54>)
 80004ae:	4a13      	ldr	r2, [pc, #76]	; (80004fc <delayms+0x58>)
 80004b0:	605a      	str	r2, [r3, #4]
	SysTick -> VAL = 0;  //  clear current value
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <delayms+0x54>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= ( 1U << 0 ) | ( 1U << 2); // Enable clock and systick
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <delayms+0x54>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <delayms+0x54>)
 80004be:	f043 0305 	orr.w	r3, r3, #5
 80004c2:	6013      	str	r3, [r2, #0]

	for( int i=0; i < delay; i++){
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e009      	b.n	80004de <delayms+0x3a>

		while(((SysTick -> CTRL ) & ( 1U << 16 )) == 0);  // To check count flag is high
 80004ca:	bf00      	nop
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <delayms+0x54>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0f9      	beq.n	80004cc <delayms+0x28>
	for( int i=0; i < delay; i++){
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3301      	adds	r3, #1
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbf1      	blt.n	80004ca <delayms+0x26>
	}

	SysTick -> CTRL =  0;  // reset count flag
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <delayms+0x54>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]

}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e010 	.word	0xe000e010
 80004fc:	0002903f 	.word	0x0002903f

08000500 <main>:


//----------------------------------------------------------------------------------------
/* MAIN FUNCTION */

int main(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	clock_max_config();  // Set SysClk 168MHz
 8000504:	f7ff ff5a 	bl	80003bc <clock_max_config>
	fpu_enable();  // Enable floating point unit
 8000508:	f000 f816 	bl	8000538 <fpu_enable>
	ADC_init();  // Initialize ADC
 800050c:	f7ff fe7a 	bl	8000204 <ADC_init>
	SWT1_init();  // Initialize Switch
 8000510:	f000 f83c 	bl	800058c <SWT1_init>


	while(1){

		/* Wait for input from switch*/
		while( ((GPIOA -> IDR ) & ( 1U << 0 )) == 1){
 8000514:	e004      	b.n	8000520 <main+0x20>

			ADC_start();  // start ADC
 8000516:	f7ff feeb 	bl	80002f0 <ADC_start>
			delayms(1);
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ffc2 	bl	80004a4 <delayms>
		while( ((GPIOA -> IDR ) & ( 1U << 0 )) == 1){
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <main+0x34>)
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b01      	cmp	r3, #1
 800052a:	d0f4      	beq.n	8000516 <main+0x16>

		}

		ADC_stop();
 800052c:	f7ff fef4 	bl	8000318 <ADC_stop>
		while( ((GPIOA -> IDR ) & ( 1U << 0 )) == 1){
 8000530:	e7f6      	b.n	8000520 <main+0x20>
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000

08000538 <fpu_enable>:
//------------------------------------------------------------------------------------------------------------------------


/* FUNCTION DEFENTION */

void fpu_enable(void){
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

	/* ENABLE FLOATING POINT UNIT FULL ACESS*/
	SCB -> CPACR |= ( 1U << 20);
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <fpu_enable+0x50>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <fpu_enable+0x50>)
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 21);
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <fpu_enable+0x50>)
 800054e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000552:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <fpu_enable+0x50>)
 8000554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 22);
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <fpu_enable+0x50>)
 800055e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000562:	4a09      	ldr	r2, [pc, #36]	; (8000588 <fpu_enable+0x50>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB -> CPACR |= ( 1U << 23);
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <fpu_enable+0x50>)
 800056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <fpu_enable+0x50>)
 8000574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <SWT1_init>:
void SWT1_init(void);  // TO SET PA0 as input

//----------------------------------------------------------------------------------------
/*Function definition*/

void SWT1_init(void){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

	GPIOA-> MODER &= (~( 1U << 0)); // TO set PA0 as input
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <SWT1_init+0x28>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <SWT1_init+0x28>)
 8000596:	f023 0301 	bic.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= (~( 1U << 1));
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <SWT1_init+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <SWT1_init+0x28>)
 80005a2:	f023 0302 	bic.w	r3, r3, #2
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e6:	f000 f811 	bl	800060c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff ff89 	bl	8000500 <main>

080005ee <LoopForever>:

LoopForever:
  b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005fc:	08000674 	.word	0x08000674
  ldr r2, =_sbss
 8000600:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000604:	20000024 	.word	0x20000024

08000608 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <BusFault_Handler>
	...

0800060c <__libc_init_array>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	4d0d      	ldr	r5, [pc, #52]	; (8000644 <__libc_init_array+0x38>)
 8000610:	4c0d      	ldr	r4, [pc, #52]	; (8000648 <__libc_init_array+0x3c>)
 8000612:	1b64      	subs	r4, r4, r5
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	2600      	movs	r6, #0
 8000618:	42a6      	cmp	r6, r4
 800061a:	d109      	bne.n	8000630 <__libc_init_array+0x24>
 800061c:	4d0b      	ldr	r5, [pc, #44]	; (800064c <__libc_init_array+0x40>)
 800061e:	4c0c      	ldr	r4, [pc, #48]	; (8000650 <__libc_init_array+0x44>)
 8000620:	f000 f818 	bl	8000654 <_init>
 8000624:	1b64      	subs	r4, r4, r5
 8000626:	10a4      	asrs	r4, r4, #2
 8000628:	2600      	movs	r6, #0
 800062a:	42a6      	cmp	r6, r4
 800062c:	d105      	bne.n	800063a <__libc_init_array+0x2e>
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f855 3b04 	ldr.w	r3, [r5], #4
 8000634:	4798      	blx	r3
 8000636:	3601      	adds	r6, #1
 8000638:	e7ee      	b.n	8000618 <__libc_init_array+0xc>
 800063a:	f855 3b04 	ldr.w	r3, [r5], #4
 800063e:	4798      	blx	r3
 8000640:	3601      	adds	r6, #1
 8000642:	e7f2      	b.n	800062a <__libc_init_array+0x1e>
 8000644:	0800066c 	.word	0x0800066c
 8000648:	0800066c 	.word	0x0800066c
 800064c:	0800066c 	.word	0x0800066c
 8000650:	08000670 	.word	0x08000670

08000654 <_init>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr

08000660 <_fini>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr
