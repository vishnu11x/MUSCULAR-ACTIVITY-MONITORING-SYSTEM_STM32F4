
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001034c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010376  2**0
                  CONTENTS, READONLY
 14 .debug_info   000004be  00000000  00000000  000103b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000001ab  00000000  00000000  00010877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000078  00000000  00000000  00010a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000004b  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018287  00000000  00000000  00010aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c25  00000000  00000000  00028d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008842d  00000000  00000000  00029997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000c8  00000000  00000000  000b1dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000b1e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800032c 	.word	0x0800032c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800032c 	.word	0x0800032c

080001c8 <ADC_init>:

//----------------------------------------------------------------------------------------
/*Function definition*/

//To initialize ADC1
void ADC_init (void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

    /* CONFIG GPIO */
	RCC -> AHB1ENR |= GPIOAEN;  // Enable clock to GPIOA
 80001cc:	4b13      	ldr	r3, [pc, #76]	; (800021c <ADC_init+0x54>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d0:	4a12      	ldr	r2, [pc, #72]	; (800021c <ADC_init+0x54>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= ( 1U << 2 );  // Enable analog mode in Port A1
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <ADC_init+0x58>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <ADC_init+0x58>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ( 1U << 3 );
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <ADC_init+0x58>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <ADC_init+0x58>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6013      	str	r3, [r2, #0]

	/* CONFIG ADC */
	RCC -> APB2ENR |= ( ADC1EN );  // Enable clock to ADC1
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <ADC_init+0x54>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <ADC_init+0x54>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1 -> CR2 |= ( 1U << 0 );  // Enable ADC1
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <ADC_init+0x5c>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <ADC_init+0x5c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6093      	str	r3, [r2, #8]
	ADC1 -> SQR3 = ADC_CH1;  // Select Channel 1 in Sequence
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <ADC_init+0x5c>)
 800020a:	2201      	movs	r2, #1
 800020c:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = ( 0X00 );  // length of Channel Sequence (1)
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <ADC_init+0x5c>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
	//ADC1 -> CR1 |= (( 1U << 24 ) | ( 1U << 25 )); // Set Resolution to 12-bit
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40023800 	.word	0x40023800
 8000220:	40020000 	.word	0x40020000
 8000224:	40012000 	.word	0x40012000

08000228 <ADC_conv>:

// To start conversion
void ADC_conv (void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

	ADC1 -> CR2 |= ( 1U << 1 );  // To set continuous conversion mode
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <ADC_conv+0x24>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a06      	ldr	r2, [pc, #24]	; (800024c <ADC_conv+0x24>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 30);  // To start the ADC conversion
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <ADC_conv+0x24>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a03      	ldr	r2, [pc, #12]	; (800024c <ADC_conv+0x24>)
 800023e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000242:	6093      	str	r3, [r2, #8]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40012000 	.word	0x40012000

08000250 <ADC_read>:

// To read ADC data
uint32_t  ADC_read (void){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0

	while(!( ADC1-> SR & ( 1U << 1) )){}
 8000254:	bf00      	nop
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <ADC_read+0x20>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0302 	and.w	r3, r3, #2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f9      	beq.n	8000256 <ADC_read+0x6>

 	return( ADC1 -> DR);
 8000262:	4b03      	ldr	r3, [pc, #12]	; (8000270 <ADC_read+0x20>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40012000 	.word	0x40012000

08000274 <main>:


//----------------------------------------------------------------------------------------
/* MAIN FUNCTION */

int main(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

	ADC_init();
 8000278:	f7ff ffa6 	bl	80001c8 <ADC_init>
	ADC_conv();
 800027c:	f7ff ffd4 	bl	8000228 <ADC_conv>

	while(1){

		sensor_data = ADC_read();
 8000280:	f7ff ffe6 	bl	8000250 <ADC_read>
 8000284:	4603      	mov	r3, r0
 8000286:	4a01      	ldr	r2, [pc, #4]	; (800028c <main+0x18>)
 8000288:	6013      	str	r3, [r2, #0]
 800028a:	e7f9      	b.n	8000280 <main+0xc>
 800028c:	2000001c 	.word	0x2000001c

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffd7 	bl	8000274 <main>

080002c6 <LoopForever>:

LoopForever:
  b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	20000020 	.word	0x20000020

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4d0d      	ldr	r5, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1b64      	subs	r4, r4, r5
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	2600      	movs	r6, #0
 80002f0:	42a6      	cmp	r6, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	4d0b      	ldr	r5, [pc, #44]	; (8000324 <__libc_init_array+0x40>)
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <__libc_init_array+0x44>)
 80002f8:	f000 f818 	bl	800032c <_init>
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	2600      	movs	r6, #0
 8000302:	42a6      	cmp	r6, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f855 3b04 	ldr.w	r3, [r5], #4
 800030c:	4798      	blx	r3
 800030e:	3601      	adds	r6, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f855 3b04 	ldr.w	r3, [r5], #4
 8000316:	4798      	blx	r3
 8000318:	3601      	adds	r6, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
