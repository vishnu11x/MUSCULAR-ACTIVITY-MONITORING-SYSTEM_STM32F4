
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010410  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000806  00000000  00000000  00010483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003b6  00000000  00000000  00010c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  00011040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000077  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000196d7  00000000  00000000  00011177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d4a  00000000  00000000  0002a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d534  00000000  00000000  0002c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000158  00000000  00000000  000b9acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000b9c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003f0 	.word	0x080003f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003f0 	.word	0x080003f0

080001c8 <ADC_init>:

//----------------------------------------------------------------------------------------
/*Function definition*/

//To initialize ADC1
void ADC_init (void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

    /* CONFIG GPIO */
	RCC -> AHB1ENR |= GPIOAEN;  // Enable clock to GPIOA
 80001cc:	4b14      	ldr	r3, [pc, #80]	; (8000220 <ADC_init+0x58>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d0:	4a13      	ldr	r2, [pc, #76]	; (8000220 <ADC_init+0x58>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> MODER |= ( 1U << 2 );  // Enable analog mode in Port A1
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <ADC_init+0x5c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <ADC_init+0x5c>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= ( 1U << 3 );
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <ADC_init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <ADC_init+0x5c>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6013      	str	r3, [r2, #0]

	/* CONFIG ADC */
	RCC -> APB2ENR |= ( ADC1EN );  // Enable clock to ADC1
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <ADC_init+0x58>)
 80001f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <ADC_init+0x58>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1 -> CR2 |= ( 1U << 0 );  // Enable ADC1
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <ADC_init+0x60>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <ADC_init+0x60>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6093      	str	r3, [r2, #8]
	ADC1 -> SQR3 = ADC_CH1;  // Select Channel 1 in Sequence
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <ADC_init+0x60>)
 800020a:	2201      	movs	r2, #1
 800020c:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = ( 0X00 );  // length of Channel Sequence (1)
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <ADC_init+0x60>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
	//ADC1 -> CR1 |= (( 1U << 24 ) | ( 1U << 25 )); // Set Resolution to 12-bit
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000
 8000228:	40012000 	.word	0x40012000

0800022c <ADC_start>:

// To start conversion
void ADC_start (void){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

	ADC1 -> CR2 |= ( 1U << 1 );  // To set continuous conversion mode
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <ADC_start+0x28>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <ADC_start+0x28>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= ( 1U << 30);  // To start the ADC conversion
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <ADC_start+0x28>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <ADC_start+0x28>)
 8000242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000246:	6093      	str	r3, [r2, #8]
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40012000 	.word	0x40012000

08000258 <ADC_read>:
void ADC_stop (void){
	ADC1 -> CR2 &= (~( 1U << 30 ));
}

// To read ADC data
uint32_t  ADC_read (void){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0

	while(!( ADC1-> SR & ( 1U << 1) ));
 800025e:	bf00      	nop
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <ADC_read+0x34>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f003 0302 	and.w	r3, r3, #2
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <ADC_read+0x8>

	uint32_t value;
	value = (ADC1 -> DR);
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <ADC_read+0x34>)
 800026e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000270:	607b      	str	r3, [r7, #4]
	ADC1 -> SR &= (~( 1U << 1));
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <ADC_read+0x34>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <ADC_read+0x34>)
 8000278:	f023 0302 	bic.w	r3, r3, #2
 800027c:	6013      	str	r3, [r2, #0]

 	return( value );
 800027e:	687b      	ldr	r3, [r7, #4]
}
 8000280:	4618      	mov	r0, r3
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40012000 	.word	0x40012000

08000290 <delayms>:

#include "delayms.h"
#include "stm32f4xx.h"


void delayms(int delay){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	SysTick -> LOAD = 16000;  // no. of clk per milliseconds
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <delayms+0x58>)
 800029a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800029e:	605a      	str	r2, [r3, #4]
	SysTick -> VAL = 0;  //  clear current value
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <delayms+0x58>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= ( 1U << 0 ) | ( 1U << 2); // Enable clock and systick
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <delayms+0x58>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <delayms+0x58>)
 80002ac:	f043 0305 	orr.w	r3, r3, #5
 80002b0:	6013      	str	r3, [r2, #0]

	for( int i=0; i < delay; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e009      	b.n	80002cc <delayms+0x3c>

		while(((SysTick -> CTRL ) & ( 1U << 16 )) == 0);
 80002b8:	bf00      	nop
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <delayms+0x58>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <delayms+0x2a>
	for( int i=0; i < delay; i++){
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbf1      	blt.n	80002b8 <delayms+0x28>
	}

	SysTick -> CTRL =  0;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <delayms+0x58>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]

}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e010 	.word	0xe000e010

080002ec <main>:


//----------------------------------------------------------------------------------------
/* MAIN FUNCTION */

int main(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0


	ADC_init();  // Initialize ADC
 80002f0:	f7ff ff6a 	bl	80001c8 <ADC_init>
	SWT1_init();  // Initialize Switch
 80002f4:	f000 f818 	bl	8000328 <SWT1_init>
	while(!((GPIOA -> IDR ) & ( 1U << 0 )));  // Wait for I/o from switch
 80002f8:	bf00      	nop
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <main+0x34>)
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <main+0xe>
	ADC_start();  // start ADC
 8000306:	f7ff ff91 	bl	800022c <ADC_start>


	while(1){


		sensor_data = ADC_read();
 800030a:	f7ff ffa5 	bl	8000258 <ADC_read>
 800030e:	4603      	mov	r3, r0
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <main+0x38>)
 8000312:	6013      	str	r3, [r2, #0]
		delayms(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000318:	f7ff ffba 	bl	8000290 <delayms>
		sensor_data = ADC_read();
 800031c:	e7f5      	b.n	800030a <main+0x1e>
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000
 8000324:	2000001c 	.word	0x2000001c

08000328 <SWT1_init>:
int SWT1_status(void);  // TO READ SWITCH STATUS

//----------------------------------------------------------------------------------------
/*Function definition*/

void SWT1_init(void){
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

	GPIOA-> MODER &= (~( 1U << 0));
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <SWT1_init+0x28>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <SWT1_init+0x28>)
 8000332:	f023 0301 	bic.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= (~( 1U << 1));
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <SWT1_init+0x28>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <SWT1_init+0x28>)
 800033e:	f023 0302 	bic.w	r3, r3, #2
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40020000 	.word	0x40020000

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffb1 	bl	80002ec <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	20000020 	.word	0x20000020

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
